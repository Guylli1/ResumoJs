ECMAScript standart(padrao) temos 9 tipos de dados: é o que padroniza a linguagem
* data types 
  primitive/primitive value
  structural
  structural primitive

## Primitivos não sao objetos, não sofrem alterações
  string 
  number
  Boolean
  undefined
  symbol
  BigInt

## Estruturais 
*object
  array
  map
  set
  date
  ...
  
## Primitive Estrutural / Structural Root Primitive
null

#variáveis
  nomes simbólicos para criar ums variável
  atalhos de código
  indentificadores
    3 palavras reservadas para criar uma variável
      *var
      *let  

      *const // const não pode mudar o seu valor durante a aplicação.

      //var é global e, também local
      //hoisting (elevação) ele puxar a var e joga lá em cima do código

#Scope
  Escopo determina a visibilidade de alguma variável no Javascript

+ significa a concatenação de valores 
// console.log('o' + name + 'tem' + age + 'anos.')
 a interpolacão acontece com as (``)
// console.log(`O ${name} tem ${age} de idade`)

* Object
Para criarmos um objeto utilizamos as chaves envolvendo as propriedades, que são atribuídas com dois pontos, por exemplo: const person = { name: 'John', age: 20 }, para acessar essas propriedades usamos o ".", por exemplo: console.log(person.name).
Todo objeto possui propriedades / atributos
e possui funcionalidades e metodos

* Array
Para criarmos um vetor utilizamos [ ] envolvendo os valores, por exemplo: const animals = [ "Lion", "Monkey" ], para acessar esses valores usamos a posição do valor no vetor, começando por 0, por exemplo: console.log(animals[0]). Para descobrirmos o número de posições de um vetor qualquer, podemos utilizar a propriedade length, por exemplo: animals.length.

* Function
Funções são tipos de dados estruturais, que são declarados dessa forma: function nomeFunção() { código à cer executado } e para executar a função, usa-se: nomeFunção(). Uma função é importante para o agrupamento e reutilização de código.

Também é possível declarar funções dentro de variáveis, desta maneira: const variavel = function() {}. Uma parte importante de funções são os parâmetros, que são similares variáveis que funcionam para colocar dados em funções, eles são declarados junto à declaração da função e quando a função for executada, os valores dos argumentos são colocados dentro dos parênteses.

Para passar valores de dentro da função para o resto do código, usa-se a palavra reservada (return) seguida do valor à ser retornado, parando assim a execução da função e mandando o valor para onde a função foi chamada.

*Parâmetros da funcao
Parâmetros, mesmo se tiverem o mesmo nome que alguma outra variável do seu código, são apenas modificados e persistem no escopo da função.

* Function Hoisting
O JavaScript possui function hoisting, permitindo que uma função seja declarada depois de ser utilizada, pois faz algo similar a elevar no código declarações de funções. Porém isso não acontece dentro de variáveis.

* Arrow Function
Também podemos escrever funções expression de uma maneira mais compacta, desta maneira: () => { código a ser executado }, chamada de Arrow Function.

*Callback function
Uma callback function é uma função que está sendo passada para outra função como parâmetro.

* Function Constructor
Funções construtoras são utilizadas para criar novos objetos e geralmente tem a sua primeira letra maiúscula, todos com as mesmas características que são criadas na função, usando a palavra reservada this para se referir ao objeto sendo criado, por exemplo:

function Person(name) {
	this.name = name
	this.walk() = function() {
		return this.name + "está andando")
	}
}
const mayk = new Person("Mayk")
const joao = new Person("João")

* Prototype 
O JavaScript possui uma característica chamada Prototype, que é uma série de funcionalidades e atributos que já existem nativamente em diversos tipos de dados, que são lidados como objetos.

* Type conversion coersion
Uma conversão de tipo feita pelo dev, explicitamente, e pode ser feita de diversas maneiras, por exemplo com o método Number(), já type coersion é uma mudança de tipos feita pelo próprio JavaScript, implicitamente, por exemplo quando você tenta somar um número na forma string com um número do tipo número.

É possível transformar números em formato de string através do método Number() e números em formato number em string usando o método String().

* .length
Para contar a quantidade de caracteres em uma string é possível usar o método length(), também é possível contar a quantidade de algarismos em um número transformando o número em string e usando o mesmo método.

* Casas decimais
Para determinar uma quantia de casas decimais de um número pode-se usar o método toFixed() colocando como argumento quantas casas decimais o número terá. Para mudar a formatação do número de separado por ponto para separado por vírgula é possível usar o método replace(".", ","). O resultado final será do tipo string, e a conversão para o tipo número não será possível por que a vírgula não é considerada parte de um número.

Maiúsculas e minúsculas
Para transformar uma string em letras maiúsculas pode-se usar o método toUpperCase(), e ao contrário, também é possível usar o toLowerCase() para transformar uma string em todas letras minúsculas.

*Separar Strings
Para separar um texto por espaços, pode-se usar o método split(" "), que transforma o texto em um array de strings baseado no argumento, que no caso são os espaços. Para juntar esse array é possível usar o método join(" "), que juntaria essas palavras sem nenhum separador, porém colocando um argumento, no caso um underscore ( join("_") ) as palavras são juntadas com o argumento de separador. 

* Encontrar palavras em frase 
Para verificar se um texto possui uma palavra específica, podemos usar o método includes(), passando como argumento a palavra a ser verificada, que retorna um valor true se encontrar a palavra, e falso se não, lembrando sempre que o método é case sensitive.

* Criar array com construtor
Um array com um método construtor, usa-se new Array(argumentos), passando como argumento o tamanho deste vetor ou os valores, por exemplo: const array = new Array("a", "b", "c").

* Strings para Arrays
Para transformar uma string em um array, pode-se usar o objeto Array com o método from(), passando como argumento a string a ser transformada em array. Por exemplo console.log(Array.from("developer").

* Manipulção de arrays 
Existem várias maneiras de manipular arrays, como: o método push(), que adiciona um elemento no final do array, o método unshift(), que adiciona um elemento no começo do array, o método pop(), que retira um elemento do final do array, o método shift(), que retira um elemento do começo do array, o método slice(), que recebe como argumentos a posição de início e a posição do fim da parte que você quer selecionar, e retorna os valores destas posições, o método splice(), que recebe como argumentos a posição de início e a quantidade de elementos que você quer remover e o método indexOff(), que encontra o index do valor que recebe como argumento em um array.

* Expressões e operadores
Expressões são qualquer linha de código que resolve alguma coisa no JavaScript, um exemplo é a expressão:
let number
Isso é uma expressão que esta declarada nesse caso  como valor undefined.

* Operadores 
-Binary
-Unary
-Ternary

* New
A expressão new, também denominada como left-hand-side expression, serve para criar um novo objeto usando as funções construtoras que temos por padrão no JavaScript.

Um exemplo de seu uso é:

let date = new Date('2022-07-12')
console.log(date.__proto__)

Typeof delete
Typeof e o delete, onde o typeof serve para saber o tipo de dado que temos na expressão, e o delete vai deletar alguma propriedade de um objeto, desde que ela exista.

Um exemplo do delete

const person = {
  name: 'John',
  age: 45,
}
delete person.age

console.log(person)

Para identificar o tipo de dado:
console.log(typeof 'John')
//que no caso é uma String

Sobre operadores aritméticos
O operador de multiplicação é o * (asterisco);
O operador de divisão é a / (barra);
O operador de soma é o + (positivo);
O operador de subtração é o - (negativo).


Como na matemática os parênteses dão prioridade a um calculo;
Um exemplo;

const calc = 4 + 1 * 5
resultado 9

//com os ()
const calc =  (4 + 1 * 5 )
resultado 25

* Operadores Lógicos
&& AND
|| OR
! NOT

Operador condicional ternário 
São dependentes de condições e podem entregar valores diferentes com base nelas.

exemplo: 
const money = true
const time = true
const viajem = money && time ? ':)' : ':('
console.log(viajem)

* Falsy e truthy
O falsy é quando um valor é considerado falso em contextos que onde um booleano é obrigatório (condicionais e loops)
já o truthy é o oposto, quando um valor é considerado verdadeiro (true) em contextos onde um booleano é obrigatório (condicionais e loops)

*Precedência dos operadores
* grouping                      ( )
* negação e incremento          ! ++ --
* multiplicação e divisão       * /
* adição e subtração            + -
* relacional                    < <= > >=
* igualdade                     == != === !==
* AND                           && 
* OR                            ||
* condicional                   ?:
* assignment (atribuição)       = += -= *= %= 


Condicionais e controle de fluxo 

if e else
//exemplo da estutura...
if (condição) {
  return algo
} else if (condição) {
  return algo 
} else {
  return algo e finaliza a estrutura.
}

switch
//exemplo da estutura de uma calculadora...

function calculate(number1, operador, number2) {
  let result

  switch (operador) {
    case '+':
      result = number1 + number2
      break
    case '-':
      result = number1 - number2
      break
    case '*':
      result = number1 * number2
      break
    default:
      console.log('Não implementado')
      break
  }
  return result
}
console.log(calculate(4, '*', 4))

throw e try...catch
exemplo das estruturas...

//throw
//Aqui existe uma função que irá disparar um erro caso não seja passado um parâmetro.
function sayMyName(name = '') {
  if (name === '') {
    throw 'Nome é obrigatório'
  }
  console.log('depois do erro')
}

//try...catch
// Precisamos agora usar o try/catch para capturarmos esse erro, caso contrário, ele irá encerrar nossa aplicação.
try {
  sayMyName()
} catch (e) {
  console.log(e)
}
console.log('após a função de erro')

//O try irá executar a função, enquanto o catch vai capturar o erro e atribuir à variável e, que só existe dentro do catch.

